/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.student_usecase.school_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.student_usecase.school_db.Results;
import com.student_usecase.school_db.TestConducted;
import com.student_usecase.school_db.TestConductedId;
import com.student_usecase.school_db.service.TestConductedService;

/**
 * Controller object for domain model class TestConducted.
 * @see TestConducted
 */
@RestController("School_DB.TestConductedController")
@Api(value = "TestConductedController", description = "Exposes APIs to work with TestConducted resource.")
@RequestMapping("/School_DB/TestConducted")
public class TestConductedController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestConductedController.class);

    @Autowired
    @Qualifier("School_DB.TestConductedService")
    private TestConductedService testConductedService;

    @ApiOperation(value = "Creates a new TestConducted instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TestConducted createTestConducted(@RequestBody TestConducted testConducted) {
        LOGGER.debug("Create TestConducted with information: {}", testConducted);
        testConducted = testConductedService.create(testConducted);
        LOGGER.debug("Created TestConducted with information: {}", testConducted);
        return testConducted;
    }

    @ApiOperation(value = "Returns the TestConducted instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TestConducted getTestConducted(@RequestParam(value = "academicYear", required = true) String academicYear, @RequestParam(value = "standardId", required = true) Integer standardId, @RequestParam(value = "testConductedId", required = true) Integer testConductedId) throws EntityNotFoundException {
        TestConductedId testconductedId = new TestConductedId();
        testconductedId.setAcademicYear(academicYear);
        testconductedId.setStandardId(standardId);
        testconductedId.setTestConductedId(testConductedId);
        LOGGER.debug("Getting TestConducted with id: {}", testconductedId);
        TestConducted testConducted = testConductedService.getById(testconductedId);
        LOGGER.debug("TestConducted details with id: {}", testConducted);
        return testConducted;
    }

    @ApiOperation(value = "Updates the TestConducted instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TestConducted editTestConducted(@RequestParam(value = "academicYear", required = true) String academicYear, @RequestParam(value = "standardId", required = true) Integer standardId, @RequestParam(value = "testConductedId", required = true) Integer testConductedId, @RequestBody TestConducted testConducted) throws EntityNotFoundException {
        testConducted.setAcademicYear(academicYear);
        testConducted.setStandardId(standardId);
        testConducted.setTestConductedId(testConductedId);
        LOGGER.debug("TestConducted details with id is updated with: {}", testConducted);
        return testConductedService.update(testConducted);
    }

    @ApiOperation(value = "Deletes the TestConducted instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTestConducted(@RequestParam(value = "academicYear", required = true) String academicYear, @RequestParam(value = "standardId", required = true) Integer standardId, @RequestParam(value = "testConductedId", required = true) Integer testConductedId) throws EntityNotFoundException {
        TestConductedId testconductedId = new TestConductedId();
        testconductedId.setAcademicYear(academicYear);
        testconductedId.setStandardId(standardId);
        testconductedId.setTestConductedId(testConductedId);
        LOGGER.debug("Deleting TestConducted with id: {}", testconductedId);
        TestConducted testConducted = testConductedService.delete(testconductedId);
        return testConducted != null;
    }

    /**
     * @deprecated Use {@link #findTestConducteds(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TestConducted instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TestConducted> searchTestConductedsByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TestConducteds list");
        return testConductedService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of TestConducted instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TestConducted> findTestConducteds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TestConducteds list");
        return testConductedService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTestConducteds(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return testConductedService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of TestConducted instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countTestConducteds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting TestConducteds");
        return testConductedService.count(query);
    }

    @RequestMapping(value = "/composite-id/resultses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the resultses instance associated with the given composite-id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Results> findAssociatedResultses(@RequestParam(value = "academicYear", required = true) String academicYear, @RequestParam(value = "standardId", required = true) Integer standardId, @RequestParam(value = "testConductedId", required = true) Integer testConductedId, Pageable pageable) {
        LOGGER.debug("Fetching all associated resultses");
        return testConductedService.findAssociatedResultses(academicYear, standardId, testConductedId, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TestConductedService instance
	 */
    protected void setTestConductedService(TestConductedService service) {
        this.testConductedService = service;
    }
}
