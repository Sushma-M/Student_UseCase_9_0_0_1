/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.student_usecase.school_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.student_usecase.school_db.StudentIdentification;
import com.student_usecase.school_db.service.StudentIdentificationService;

/**
 * Controller object for domain model class StudentIdentification.
 * @see StudentIdentification
 */
@RestController("School_DB.StudentIdentificationController")
@Api(value = "StudentIdentificationController", description = "Exposes APIs to work with StudentIdentification resource.")
@RequestMapping("/School_DB/StudentIdentification")
public class StudentIdentificationController {

    private static final Logger LOGGER = LoggerFactory.getLogger(StudentIdentificationController.class);

    @Autowired
    @Qualifier("School_DB.StudentIdentificationService")
    private StudentIdentificationService studentIdentificationService;

    @ApiOperation(value = "Creates a new StudentIdentification instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StudentIdentification createStudentIdentification(@RequestBody StudentIdentification studentIdentification) {
        LOGGER.debug("Create StudentIdentification with information: {}", studentIdentification);
        studentIdentification = studentIdentificationService.create(studentIdentification);
        LOGGER.debug("Created StudentIdentification with information: {}", studentIdentification);
        return studentIdentification;
    }

    @ApiOperation(value = "Returns the StudentIdentification instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StudentIdentification getStudentIdentification(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting StudentIdentification with id: {}", id);
        StudentIdentification foundStudentIdentification = studentIdentificationService.getById(id);
        LOGGER.debug("StudentIdentification details with id: {}", foundStudentIdentification);
        return foundStudentIdentification;
    }

    @ApiOperation(value = "Updates the StudentIdentification instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StudentIdentification editStudentIdentification(@PathVariable("id") Integer id, @RequestBody StudentIdentification studentIdentification) throws EntityNotFoundException {
        LOGGER.debug("Editing StudentIdentification with id: {}", studentIdentification.getIdentificationId());
        studentIdentification.setIdentificationId(id);
        studentIdentification = studentIdentificationService.update(studentIdentification);
        LOGGER.debug("StudentIdentification details with id: {}", studentIdentification);
        return studentIdentification;
    }

    @ApiOperation(value = "Deletes the StudentIdentification instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteStudentIdentification(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting StudentIdentification with id: {}", id);
        StudentIdentification deletedStudentIdentification = studentIdentificationService.delete(id);
        return deletedStudentIdentification != null;
    }

    @RequestMapping(value = "/identificationNumber/{identificationNumber}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching StudentIdentification with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StudentIdentification getByIdentificationNumber(@PathVariable("identificationNumber") String identificationNumber) {
        LOGGER.debug("Getting StudentIdentification with uniques key IdentificationNumber");
        return studentIdentificationService.getByIdentificationNumber(identificationNumber);
    }

    /**
     * @deprecated Use {@link #findStudentIdentifications(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of StudentIdentification instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<StudentIdentification> searchStudentIdentificationsByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering StudentIdentifications list");
        return studentIdentificationService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of StudentIdentification instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<StudentIdentification> findStudentIdentifications(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering StudentIdentifications list");
        return studentIdentificationService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportStudentIdentifications(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return studentIdentificationService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of StudentIdentification instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countStudentIdentifications(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting StudentIdentifications");
        return studentIdentificationService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service StudentIdentificationService instance
	 */
    protected void setStudentIdentificationService(StudentIdentificationService service) {
        this.studentIdentificationService = service;
    }
}
