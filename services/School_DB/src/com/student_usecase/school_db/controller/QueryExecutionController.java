/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.student_usecase.school_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.beans.factory.annotation.Qualifier;
import com.student_usecase.school_db.service.School_DBQueryExecutorService_V1;
import com.wavemaker.runtime.data.model.CustomQuery;
import com.wavemaker.runtime.data.exception.QueryParameterMismatchException;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

@RestController(value = "School_DB.QueryExecutionController")
@Api(value = "QueryExecutionController", description = "Controller class for query execution")
@RequestMapping("/School_DB/queryExecutor")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private School_DBQueryExecutorService_V1 queryService;

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/SV_AcademicSubjectsByStandard", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Object> executeSV_AcademicSubjectsByStandard(@RequestParam(value = "year", required = false) java.lang.String year, @RequestParam(value = "standard", required = false) java.lang.Integer standard, Pageable pageable) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query SV_AcademicSubjectsByStandard");
        Page<Object> result = queryService.executeSV_AcademicSubjectsByStandard(pageable, year, standard);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/SV_CountOfStudentPerGrade", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Object> executeSV_CountOfStudentPerGrade(@RequestParam(value = "academicYear", required = false) java.lang.String academicYear, @RequestParam(value = "standardid", required = false) java.lang.Integer standardid, Pageable pageable) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query SV_CountOfStudentPerGrade");
        Page<Object> result = queryService.executeSV_CountOfStudentPerGrade(pageable, academicYear, standardid);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/SV_CountOfStudents", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Object> executeSV_CountOfStudents(@RequestParam(value = "standard", required = false) java.lang.Integer standard, @RequestParam(value = "year", required = false) java.lang.String year, Pageable pageable) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query SV_CountOfStudents");
        Page<Object> result = queryService.executeSV_CountOfStudents(pageable, standard, year);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/SV_GetSTudentResultsForStandard", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Object> executeSV_GetSTudentResultsForStandard(@RequestParam(value = "academicYear", required = false) java.lang.String academicYear, @RequestParam(value = "standardid", required = false) java.lang.Integer standardid, @RequestParam(value = "testid", required = false) java.lang.Integer testid, Pageable pageable) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query SV_GetSTudentResultsForStandard");
        Page<Object> result = queryService.executeSV_GetSTudentResultsForStandard(pageable, academicYear, standardid, testid);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/SV_Top3StudentsFromAllStandards", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Object> executeSV_Top3StudentsFromAllStandards(@RequestParam(value = "TESTID", required = false) java.lang.Integer TESTID, @RequestParam(value = "ACADEMICYEAR", required = false) java.lang.String ACADEMICYEAR, Pageable pageable) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query SV_Top3StudentsFromAllStandards");
        Page<Object> result = queryService.executeSV_Top3StudentsFromAllStandards(pageable, TESTID, ACADEMICYEAR);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute customer queries")
    @RequestMapping(value = "/queries/wm_custom", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Object> executeWMCustomQuery(@RequestBody CustomQuery query, Pageable pageable) {
        Page<Object> result = queryService.executeWMCustomQuerySelect(query, pageable);
        LOGGER.debug("got the result {}" + result);
        return result;
    }

    @ApiOperation(value = "Process request to execute customer queries")
    @RequestMapping(value = "/queries/wm_custom_update", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public int executeWMCustomQuery(@RequestBody CustomQuery query) {
        int result = queryService.executeWMCustomQueryUpdate(query);
        LOGGER.debug("got the result {}" + result);
        return result;
    }
}
