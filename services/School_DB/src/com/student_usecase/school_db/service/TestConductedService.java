/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.student_usecase.school_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.student_usecase.school_db.Results;
import com.student_usecase.school_db.TestConducted;
import com.student_usecase.school_db.TestConductedId;

/**
 * Service object for domain model class {@link TestConducted}.
 */
public interface TestConductedService {

    /**
     * Creates a new TestConducted. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TestConducted if any.
     *
     * @param testConducted Details of the TestConducted to be created; value cannot be null.
     * @return The newly created TestConducted.
     */
	TestConducted create(@Valid TestConducted testConducted);


	/**
	 * Returns TestConducted by given id if exists.
	 *
	 * @param testconductedId The id of the TestConducted to get; value cannot be null.
	 * @return TestConducted associated with the given testconductedId.
     * @throws EntityNotFoundException If no TestConducted is found.
	 */
	TestConducted getById(TestConductedId testconductedId) throws EntityNotFoundException;

    /**
	 * Find and return the TestConducted by given id if exists, returns null otherwise.
	 *
	 * @param testconductedId The id of the TestConducted to get; value cannot be null.
	 * @return TestConducted associated with the given testconductedId.
	 */
	TestConducted findById(TestConductedId testconductedId);


	/**
	 * Updates the details of an existing TestConducted. It replaces all fields of the existing TestConducted with the given testConducted.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on TestConducted if any.
     *
	 * @param testConducted The details of the TestConducted to be updated; value cannot be null.
	 * @return The updated TestConducted.
	 * @throws EntityNotFoundException if no TestConducted is found with given input.
	 */
	TestConducted update(@Valid TestConducted testConducted) throws EntityNotFoundException;

    /**
	 * Deletes an existing TestConducted with the given id.
	 *
	 * @param testconductedId The id of the TestConducted to be deleted; value cannot be null.
	 * @return The deleted TestConducted.
	 * @throws EntityNotFoundException if no TestConducted found with the given id.
	 */
	TestConducted delete(TestConductedId testconductedId) throws EntityNotFoundException;

	/**
	 * Find all TestConducteds matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TestConducteds.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<TestConducted> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all TestConducteds matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TestConducteds.
     *
     * @see Pageable
     * @see Page
	 */
    Page<TestConducted> findAll(String query, Pageable pageable);

    /**
	 * Exports all TestConducteds matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the TestConducteds in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the TestConducted.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated resultses for given TestConducted id.
     *
     * @param academicYear value of academicYear; value cannot be null
     * @param standardId value of standardId; value cannot be null
     * @param testConductedId value of testConductedId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Results instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Results> findAssociatedResultses(String academicYear, Integer standardId, Integer testConductedId, Pageable pageable);

}

