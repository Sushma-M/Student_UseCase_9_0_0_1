/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.student_usecase.studentportal_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.student_usecase.studentportal_db.AcademicSubjects;
import com.student_usecase.studentportal_db.Subjects;
import com.student_usecase.studentportal_db.service.SubjectsService;

/**
 * Controller object for domain model class Subjects.
 * @see Subjects
 */
@RestController("StudentPortal_DB.SubjectsController")
@Api(value = "SubjectsController", description = "Exposes APIs to work with Subjects resource.")
@RequestMapping("/StudentPortal_DB/Subjects")
public class SubjectsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubjectsController.class);

    @Autowired
    @Qualifier("StudentPortal_DB.SubjectsService")
    private SubjectsService subjectsService;

    @ApiOperation(value = "Creates a new Subjects instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Subjects createSubjects(@RequestBody Subjects subjects) {
        LOGGER.debug("Create Subjects with information: {}", subjects);
        subjects = subjectsService.create(subjects);
        LOGGER.debug("Created Subjects with information: {}", subjects);
        return subjects;
    }

    @ApiOperation(value = "Returns the Subjects instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Subjects getSubjects(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Subjects with id: {}", id);
        Subjects foundSubjects = subjectsService.getById(id);
        LOGGER.debug("Subjects details with id: {}", foundSubjects);
        return foundSubjects;
    }

    @ApiOperation(value = "Updates the Subjects instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Subjects editSubjects(@PathVariable("id") Integer id, @RequestBody Subjects subjects) throws EntityNotFoundException {
        LOGGER.debug("Editing Subjects with id: {}", subjects.getSubjectId());
        subjects.setSubjectId(id);
        subjects = subjectsService.update(subjects);
        LOGGER.debug("Subjects details with id: {}", subjects);
        return subjects;
    }

    @ApiOperation(value = "Deletes the Subjects instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSubjects(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Subjects with id: {}", id);
        Subjects deletedSubjects = subjectsService.delete(id);
        return deletedSubjects != null;
    }

    /**
     * @deprecated Use {@link #findSubjects(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Subjects instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Subjects> searchSubjectsByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Subjects list");
        return subjectsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Subjects instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Subjects> findSubjects(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Subjects list");
        return subjectsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSubjects(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return subjectsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Subjects instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countSubjects(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Subjects");
        return subjectsService.count(query);
    }

    @RequestMapping(value = "/{id}/academicSubjectses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the academicSubjectses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AcademicSubjects> findAssociatedAcademicSubjectses(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated academicSubjectses");
        return subjectsService.findAssociatedAcademicSubjectses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubjectsService instance
	 */
    protected void setSubjectsService(SubjectsService service) {
        this.subjectsService = service;
    }
}
