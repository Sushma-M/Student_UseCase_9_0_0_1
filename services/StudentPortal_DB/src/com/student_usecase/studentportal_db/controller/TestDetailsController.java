/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.student_usecase.studentportal_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.student_usecase.studentportal_db.AcademicTestSubjects;
import com.student_usecase.studentportal_db.TestDetails;
import com.student_usecase.studentportal_db.service.TestDetailsService;

/**
 * Controller object for domain model class TestDetails.
 * @see TestDetails
 */
@RestController("StudentPortal_DB.TestDetailsController")
@Api(value = "TestDetailsController", description = "Exposes APIs to work with TestDetails resource.")
@RequestMapping("/StudentPortal_DB/TestDetails")
public class TestDetailsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestDetailsController.class);

    @Autowired
    @Qualifier("StudentPortal_DB.TestDetailsService")
    private TestDetailsService testDetailsService;

    @ApiOperation(value = "Creates a new TestDetails instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TestDetails createTestDetails(@RequestBody TestDetails testDetails) {
        LOGGER.debug("Create TestDetails with information: {}", testDetails);
        testDetails = testDetailsService.create(testDetails);
        LOGGER.debug("Created TestDetails with information: {}", testDetails);
        return testDetails;
    }

    @ApiOperation(value = "Returns the TestDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TestDetails getTestDetails(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TestDetails with id: {}", id);
        TestDetails foundTestDetails = testDetailsService.getById(id);
        LOGGER.debug("TestDetails details with id: {}", foundTestDetails);
        return foundTestDetails;
    }

    @ApiOperation(value = "Updates the TestDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TestDetails editTestDetails(@PathVariable("id") Integer id, @RequestBody TestDetails testDetails) throws EntityNotFoundException {
        LOGGER.debug("Editing TestDetails with id: {}", testDetails.getTestId());
        testDetails.setTestId(id);
        testDetails = testDetailsService.update(testDetails);
        LOGGER.debug("TestDetails details with id: {}", testDetails);
        return testDetails;
    }

    @ApiOperation(value = "Deletes the TestDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTestDetails(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TestDetails with id: {}", id);
        TestDetails deletedTestDetails = testDetailsService.delete(id);
        return deletedTestDetails != null;
    }

    /**
     * @deprecated Use {@link #findTestDetails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TestDetails instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TestDetails> searchTestDetailsByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TestDetails list");
        return testDetailsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of TestDetails instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TestDetails> findTestDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TestDetails list");
        return testDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTestDetails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return testDetailsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of TestDetails instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countTestDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting TestDetails");
        return testDetailsService.count(query);
    }

    @RequestMapping(value = "/{id}/academicTestSubjectses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the academicTestSubjectses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AcademicTestSubjects> findAssociatedAcademicTestSubjectses(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated academicTestSubjectses");
        return testDetailsService.findAssociatedAcademicTestSubjectses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TestDetailsService instance
	 */
    protected void setTestDetailsService(TestDetailsService service) {
        this.testDetailsService = service;
    }
}
