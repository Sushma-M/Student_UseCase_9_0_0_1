/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.student_usecase.studentportal_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.util.Date;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.student_usecase.studentportal_db.AcademicSubjects;
import com.student_usecase.studentportal_db.AcademicSubjectsId;
import com.student_usecase.studentportal_db.AcademicTestSubjects;
import com.student_usecase.studentportal_db.service.AcademicSubjectsService;

/**
 * Controller object for domain model class AcademicSubjects.
 * @see AcademicSubjects
 */
@RestController("StudentPortal_DB.AcademicSubjectsController")
@Api(value = "AcademicSubjectsController", description = "Exposes APIs to work with AcademicSubjects resource.")
@RequestMapping("/StudentPortal_DB/AcademicSubjects")
public class AcademicSubjectsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AcademicSubjectsController.class);

    @Autowired
    @Qualifier("StudentPortal_DB.AcademicSubjectsService")
    private AcademicSubjectsService academicSubjectsService;

    @ApiOperation(value = "Creates a new AcademicSubjects instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AcademicSubjects createAcademicSubjects(@RequestBody AcademicSubjects academicSubjects) {
        LOGGER.debug("Create AcademicSubjects with information: {}", academicSubjects);
        academicSubjects = academicSubjectsService.create(academicSubjects);
        LOGGER.debug("Created AcademicSubjects with information: {}", academicSubjects);
        return academicSubjects;
    }

    @ApiOperation(value = "Returns the AcademicSubjects instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AcademicSubjects getAcademicSubjects(@RequestParam(value = "academicYear", required = true) Date academicYear, @RequestParam(value = "standard", required = true) String standard, @RequestParam(value = "subjectId", required = true) Integer subjectId) throws EntityNotFoundException {
        AcademicSubjectsId academicsubjectsId = new AcademicSubjectsId();
        academicsubjectsId.setAcademicYear(academicYear);
        academicsubjectsId.setStandard(standard);
        academicsubjectsId.setSubjectId(subjectId);
        LOGGER.debug("Getting AcademicSubjects with id: {}", academicsubjectsId);
        AcademicSubjects academicSubjects = academicSubjectsService.getById(academicsubjectsId);
        LOGGER.debug("AcademicSubjects details with id: {}", academicSubjects);
        return academicSubjects;
    }

    @ApiOperation(value = "Updates the AcademicSubjects instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AcademicSubjects editAcademicSubjects(@RequestParam(value = "academicYear", required = true) Date academicYear, @RequestParam(value = "standard", required = true) String standard, @RequestParam(value = "subjectId", required = true) Integer subjectId, @RequestBody AcademicSubjects academicSubjects) throws EntityNotFoundException {
        academicSubjects.setAcademicYear(academicYear);
        academicSubjects.setStandard(standard);
        academicSubjects.setSubjectId(subjectId);
        LOGGER.debug("AcademicSubjects details with id is updated with: {}", academicSubjects);
        return academicSubjectsService.update(academicSubjects);
    }

    @ApiOperation(value = "Deletes the AcademicSubjects instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAcademicSubjects(@RequestParam(value = "academicYear", required = true) Date academicYear, @RequestParam(value = "standard", required = true) String standard, @RequestParam(value = "subjectId", required = true) Integer subjectId) throws EntityNotFoundException {
        AcademicSubjectsId academicsubjectsId = new AcademicSubjectsId();
        academicsubjectsId.setAcademicYear(academicYear);
        academicsubjectsId.setStandard(standard);
        academicsubjectsId.setSubjectId(subjectId);
        LOGGER.debug("Deleting AcademicSubjects with id: {}", academicsubjectsId);
        AcademicSubjects academicSubjects = academicSubjectsService.delete(academicsubjectsId);
        return academicSubjects != null;
    }

    /**
     * @deprecated Use {@link #findAcademicSubjects(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AcademicSubjects instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AcademicSubjects> searchAcademicSubjectsByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AcademicSubjects list");
        return academicSubjectsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of AcademicSubjects instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AcademicSubjects> findAcademicSubjects(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AcademicSubjects list");
        return academicSubjectsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAcademicSubjects(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return academicSubjectsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of AcademicSubjects instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countAcademicSubjects(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting AcademicSubjects");
        return academicSubjectsService.count(query);
    }

    @RequestMapping(value = "/composite-id/academicTestSubjectses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the academicTestSubjectses instance associated with the given composite-id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AcademicTestSubjects> findAssociatedAcademicTestSubjectses(@RequestParam(value = "academicYear", required = true) Date academicYear, @RequestParam(value = "standard", required = true) String standard, @RequestParam(value = "subjectId", required = true) Integer subjectId, Pageable pageable) {
        LOGGER.debug("Fetching all associated academicTestSubjectses");
        return academicSubjectsService.findAssociatedAcademicTestSubjectses(academicYear, standard, subjectId, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AcademicSubjectsService instance
	 */
    protected void setAcademicSubjectsService(AcademicSubjectsService service) {
        this.academicSubjectsService = service;
    }
}
