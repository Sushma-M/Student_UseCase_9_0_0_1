/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.student_usecase.studentportal_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.student_usecase.studentportal_db.Academics;
import com.student_usecase.studentportal_db.StandardDetails;


/**
 * ServiceImpl object for domain model class StandardDetails.
 *
 * @see StandardDetails
 */
@Service("StudentPortal_DB.StandardDetailsService")
public class StandardDetailsServiceImpl implements StandardDetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(StandardDetailsServiceImpl.class);

    @Autowired
	@Qualifier("StudentPortal_DB.AcademicsService")
	private AcademicsService academicsService;

    @Autowired
    @Qualifier("StudentPortal_DB.StandardDetailsDao")
    private WMGenericDao<StandardDetails, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<StandardDetails, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "StudentPortal_DBTransactionManager")
    @Override
	public StandardDetails create(StandardDetails standardDetails) {
        LOGGER.debug("Creating a new StandardDetails with information: {}", standardDetails);
        StandardDetails standardDetailsCreated = this.wmGenericDao.create(standardDetails);
        if(standardDetailsCreated.getAcademicses() != null) {
            for(Academics academicse : standardDetailsCreated.getAcademicses()) {
                academicse.setStandardDetails(standardDetailsCreated);
                LOGGER.debug("Creating a new child Academics with information: {}", academicse);
                academicsService.create(academicse);
            }
        }
        return standardDetailsCreated;
    }

	@Transactional(readOnly = true, value = "StudentPortal_DBTransactionManager")
	@Override
	public StandardDetails getById(String standarddetailsId) throws EntityNotFoundException {
        LOGGER.debug("Finding StandardDetails by id: {}", standarddetailsId);
        StandardDetails standardDetails = this.wmGenericDao.findById(standarddetailsId);
        if (standardDetails == null){
            LOGGER.debug("No StandardDetails found with id: {}", standarddetailsId);
            throw new EntityNotFoundException(String.valueOf(standarddetailsId));
        }
        return standardDetails;
    }

    @Transactional(readOnly = true, value = "StudentPortal_DBTransactionManager")
	@Override
	public StandardDetails findById(String standarddetailsId) {
        LOGGER.debug("Finding StandardDetails by id: {}", standarddetailsId);
        return this.wmGenericDao.findById(standarddetailsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "StudentPortal_DBTransactionManager")
	@Override
	public StandardDetails update(StandardDetails standardDetails) throws EntityNotFoundException {
        LOGGER.debug("Updating StandardDetails with information: {}", standardDetails);
        this.wmGenericDao.update(standardDetails);

        String standarddetailsId = standardDetails.getStandardId();

        return this.wmGenericDao.findById(standarddetailsId);
    }

    @Transactional(value = "StudentPortal_DBTransactionManager")
	@Override
	public StandardDetails delete(String standarddetailsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting StandardDetails with id: {}", standarddetailsId);
        StandardDetails deleted = this.wmGenericDao.findById(standarddetailsId);
        if (deleted == null) {
            LOGGER.debug("No StandardDetails found with id: {}", standarddetailsId);
            throw new EntityNotFoundException(String.valueOf(standarddetailsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "StudentPortal_DBTransactionManager")
	@Override
	public Page<StandardDetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all StandardDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "StudentPortal_DBTransactionManager")
    @Override
    public Page<StandardDetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all StandardDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "StudentPortal_DBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service StudentPortal_DB for table StandardDetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "StudentPortal_DBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "StudentPortal_DBTransactionManager")
    @Override
    public Page<Academics> findAssociatedAcademicses(String standardId, Pageable pageable) {
        LOGGER.debug("Fetching all associated academicses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("standardDetails.standardId = '" + standardId + "'");

        return academicsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AcademicsService instance
	 */
	protected void setAcademicsService(AcademicsService service) {
        this.academicsService = service;
    }

}

