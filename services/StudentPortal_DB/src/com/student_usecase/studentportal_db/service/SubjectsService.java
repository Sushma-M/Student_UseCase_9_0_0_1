/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.student_usecase.studentportal_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.student_usecase.studentportal_db.AcademicSubjects;
import com.student_usecase.studentportal_db.Subjects;

/**
 * Service object for domain model class {@link Subjects}.
 */
public interface SubjectsService {

    /**
     * Creates a new Subjects. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Subjects if any.
     *
     * @param subjects Details of the Subjects to be created; value cannot be null.
     * @return The newly created Subjects.
     */
	Subjects create(Subjects subjects);


	/**
	 * Returns Subjects by given id if exists.
	 *
	 * @param subjectsId The id of the Subjects to get; value cannot be null.
	 * @return Subjects associated with the given subjectsId.
     * @throws EntityNotFoundException If no Subjects is found.
	 */
	Subjects getById(Integer subjectsId) throws EntityNotFoundException;

    /**
	 * Find and return the Subjects by given id if exists, returns null otherwise.
	 *
	 * @param subjectsId The id of the Subjects to get; value cannot be null.
	 * @return Subjects associated with the given subjectsId.
	 */
	Subjects findById(Integer subjectsId);


	/**
	 * Updates the details of an existing Subjects. It replaces all fields of the existing Subjects with the given subjects.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Subjects if any.
     *
	 * @param subjects The details of the Subjects to be updated; value cannot be null.
	 * @return The updated Subjects.
	 * @throws EntityNotFoundException if no Subjects is found with given input.
	 */
	Subjects update(Subjects subjects) throws EntityNotFoundException;

    /**
	 * Deletes an existing Subjects with the given id.
	 *
	 * @param subjectsId The id of the Subjects to be deleted; value cannot be null.
	 * @return The deleted Subjects.
	 * @throws EntityNotFoundException if no Subjects found with the given id.
	 */
	Subjects delete(Integer subjectsId) throws EntityNotFoundException;

	/**
	 * Find all Subjects matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Subjects.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Subjects> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Subjects matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Subjects.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Subjects> findAll(String query, Pageable pageable);

    /**
	 * Exports all Subjects matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Subjects in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Subjects.
	 */
	long count(String query);

    /*
     * Returns the associated academicSubjectses for given Subjects id.
     *
     * @param subjectId value of subjectId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated AcademicSubjects instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<AcademicSubjects> findAssociatedAcademicSubjectses(Integer subjectId, Pageable pageable);

}

